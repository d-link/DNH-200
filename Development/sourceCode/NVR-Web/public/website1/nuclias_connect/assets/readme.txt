SP1界面用到的设备命令相关文件：

1、“DevCategory.json”文件描述设备的分类信息，在SP1里设备分类有两层，DevL1Class表示第一层，DevL2Class表示第二层。
    该文件的主要作用是添加抽象设备时提供设备分类的选项。
2、“DevAbstract.json”文件描述了设备的“功能元素”的定义的全集。
    “功能元素”的定义包括功能名称和实现该功能的参数；功能名称在文档里是唯一的，它在设备命令文件和界面功能描述文件里做关键字使用；
    功能参数又包括参数名称和参数类型，每个功能元素里的各个参数名称也是不可同名的，它们在各个设备的命令文件和界面功能描述文件里也会作为关键字使用。
    功能参数分两种情况，如果是读功能，参数代表的是读取的结果，如果是写功能，参数则是待写的值。
    “功能元素”是实现界面功能的基础，例如逻辑面板图用到的功能元素可能会有“PortInfo”、“PortTraffic”、“PoE”等。
    同一个“功能元素”可能会有不同的版本，所谓不同版本就是指功能名称一致但是实现该功能的参数个数或类型不一致，
    例如lldpStatus，有的带port有的不带port，不同版本的功能在界面功能描述文件里也需有不同的实现方式。
3、 设备命令文件
    设备命令文件放在commands文件夹下，其中public.json里是各设备共用的，里面描述了设备公共的功能元素的实现方式。
    设备命令文件以设备型号命名，按设备分类分别放置在各自的文件夹下，例如“commands/AP/Unified AP/DWL-8600AP.json”。
    设备命令文件里描述了两类信息，一是设备的SOID，设备分类，设备型号，设备厂商等基本信息，二是设备支持的功能元素和各功能元素的实现方式。
    设备命令文件的应用场景有两处：一是corserver从数据库读取到task要下发任务时，需要根据设备命令文件将task解析成probe和设备识别的命令后再下发下去；
    二是界面上选中一个设备进行操作时，webserver需要根据设备命令文件获知该设备支持的“功能元素”并根据界面功能描述文件来呈现相应的支持的界面功能。
4、 界面功能描述文件
    前面3个文件是与界面无关的，不管是在SP1里还是将来的其他系统里都是可通用的，而界面功能描述文件是相对上层的SP1专用的文件，它将“功能元素”组装成界面功能。
    因为目前SP1界面使用的angular是一种双向数据绑定的方式，所以为不同设备动态呈现各自界面和实现对应的数据传递提供了方便。
    这个界面功能描述文件有三个用处：
    一是将界面元素与“功能元素”和“功能元素里的参数”进行绑定。
    二是描述各功能元素之间的逻辑关系（如配置radio时，选2.4G或5.0G时channel需呈现不同的可选值）、分组关系（如AP特有的，switch特有的配置项进行分组）、约束关系等（如备份和重启操作不能同时进行）
    三是描述界面元素的呈现方式（分层、排列、多语言等）
5、 设备profile文件
    这个文件不是预先定义的，是用户在设备配置操作期间出现的。
    它罗列了用户当次操作将要配置的设备的“功能元素”和功能元素的参数名称和参数值。这些数据可以保存以便下次操作时参考或直接导入。

ps:抽象设备定义为什么不按抽象二层交换机、抽象三层交换机、抽象AP进行分类？
不同类型的设备支持的“功能元素”确实区别很大，但是就算按switch按AP进行分类了，每个AP支持的也不是这个抽象AP里的定义的功能的完全子集，AP与AP之间各种差异还是很多。
所以为简单统一方便扩展，我觉得抽象设备里各功能元素还是一视同仁比较好。但是为方便识别和操作，AP和switch之间这种功能的区别还是可以体现在界面上，所以我把它们定义在界面功能描述文件里。


